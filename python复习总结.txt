模块一：python基础
1.python 是解释型语言， 使用解释器
2.下载windows系统下的 python 教程推荐：Download Windows x86-64 executable installer
	现在机一般都是64位的了，这就是64位的，没毛病  executable installer ----> 可执行安装程序

3.关键字：id  教程说：id相同，意味着type和value必定相同
					  value相同，type肯定相同，但id可能不同（理解）
		  这意思：关键字id获取到的就是变量的地址值(内存地址)喽
			相当于C中： u8 num = 0x11;
						printf("变量地址值=0x%x",&num)
4.关键字：is
	如： if a is b :print('true')
	is的意思：判断 a对象 是否就是 b对象，
		但是不是通过值对比，而是通过id(地址)是否相同对比
	而 == ：就是通过值对比的
	但是好像python3中(实测)，value相同了，id也就相同了
	实际中， is 和 == 要注意我们对比到底是什么，而觉得用哪个

5.在 python中没有常量这种定义
	如：C中 const u8 num =  0; ---> num就是常量
		python中，NUM = 10 ---->程序员约定俗成用变量名全部大写表达常量
				
6.input--->python2 和 python3 的input 语言是不一样的 
	#在python3中
		input：用户输入任何值，都存成字符串类型
	#在python2中
	input：用户输入什么类型，就存成什么类型
	raw_input：等于python3的input

7.python2.2起，整数发生溢出，python解释器会自动把整数转换为长整数
	所以如今 长整数后面不加L也没有关系 
	在 python3中甚至取消了L的语法， 加了还会报错

8.python 中只有字符串类型，没有字符类型 a = 'a'==>type:str 也是字符串类型
	#单引号和双引号没有区别 ，可能唯一区别(自己想的)
	print("pan 'and' rf") #pan 'and' rf	  双引号中用到' 不需要做转义
	print('pan \'and\' rf')#pan 'and' rf  单引号中要用到' 需要加个\做转义，
	print('pan 'and'rf ') #报错
	
	#多引号什么作用呢？作用就是多行字符串必须用多引号
	msg = '''
	今天我想写首小诗，
	歌颂我的同桌，
	你看他那乌黑的短发，
	好像一只炸毛鸡。
	'''
	
9.字符串的拼接方法  3种
	name = 'panrf'
	age = '24'
	job = 'it'
	#方法一 ：+号 拼接
	str1 = name+age+job #可以的，但不推介这么拼接
	因为python中str类型是不可变的类型，使用+连接2个字符串时，会生成一个新的字符串
		新的字符串就寻妖会重新申请内存
	name + age 需要申请一块新内存   再 + job 又要申请一块新内存（重复申请内存效率低）
	这里还看不错什么效果，+拼接一多，效率就明显join低
	#方法二 : ''.join str类型 内置方法
	str2 = ''.join([name,age,job]) 
	不管多少个字符串拼接，都只用申请一次内存，对列表、元组的字符做拼接首选
	#方法三 : 格式化
	str3 = '%s%s%s'%(name,age,job) #应该在初始化的比较适合
	总结： 方法二和方法三比较常用， 方法一不推介使用
		   效率差，1.语法总结.py 中做个实测

10. and or not 这里需要特别注意表达式的先后执行顺序（虽然他们优先级是同级的）
	>>> True or Flase and False
	True
	>>> (True or Flase) and False
	False
	先执行右边，所以在用到and or not 就加（）保证是自己想要的结果和增加可读性
	

11.python中多了个for(...)/while(..)  else 的语法，这是其他语言没有的（C就没有）
	while/for(...):
		if ...:
			break
		....
	else:
		print("循环正常结束，不是break退出的，就会执行else里的代码")

12.引用计数概念 （了解就好）
	增加引用计数
	对象被创建并将其引用赋值给变量，引用计数加1（例a＝1）
	同一个对象的引用又赋值给其它变量，引用计数加1（例b＝a）
	对象作为参数被函数调用，引用计数加1（例int(a)
	对象成为容器对象中的一个元素，引用计数加1（例list_test=['alex','z',a]）
	减少引用计数
	a作为被函数调用的参数，在函数运行结束后，包括a在内的所有局部变量均会被销毁，引用计数减1
	变量被赋值给另外一个对象，原对象引用计数减1（例b＝2，1这一内存对象的引用只剩a）
	使用del删除对象的引用，引用计数减1（例del a）
	a作为容器list_test中的一个元素，被清除,引用计数减少（例list_test.remove(a)）
	容器本身被销毁（例del list_test）
	
	特别注意在文件操作的时候：
	 f = open('a.txt') #文件容器引用计数 +1    = 1
	 f1 = f			   #文件容器引用计数再 +1  = 2
	 del f1            #文件容器引用计数 -1    = 1
	 所以这时候文件还是开这的，因为引用计数还有1 
	 
	
	
	
	
	
	
	
	